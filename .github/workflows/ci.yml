name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build-wasm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build WASM files
        uses: docker/build-push-action@v5
        with:
          context: .
          target: export-stage
          outputs: type=local,dest=./wasm
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Fix worker import paths
        run: |
          for file in ./wasm/*.js; do
            filename=$(basename "$file")
            echo "Fixing $filename"
            node -e "
          const fs = require('fs');
          const content = fs.readFileSync('$file', 'utf8');
          fs.writeFileSync('$file', content.replace(/$filename/g, ''));
          "
          done

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/
          retention-days: 30

  test:
    runs-on: ubuntu-latest
    needs: build-wasm

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      # - name: Run tests
      #   run: npm test

      - name: Build project
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  deploy-demo:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:lib

      - name: Build demo
        run: npm run build:demo:github

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: demo-dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build-wasm]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new-release: ${{ steps.check_tag.outputs.exists == 'false' }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

      - name: Bump version
        id: bump_version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if this is a version bump commit
          if git log -1 --pretty=%B | grep -q "chore: bump version"; then
            echo "Version bump commit detected, using current version"
            echo "VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "BUMPED=false" >> $GITHUB_OUTPUT
          else
            # Determine version bump type based on commit messages
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"
            
            if echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?!:"; then
              # Major version for breaking changes
              VERSION_TYPE="major"
            elif echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?:"; then
              # Minor version for new features
              VERSION_TYPE="minor"
            else
              # Patch version for bug fixes and other changes
              VERSION_TYPE="patch"
            fi
            
            echo "Version bump type: $VERSION_TYPE"
            
            # Bump version
            NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version | sed 's/v//')
            echo "New version: $NEW_VERSION"
            echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "BUMPED=true" >> $GITHUB_OUTPUT
            
            # Commit version bump
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add package.json package-lock.json
            git commit -m "chore: bump version to $NEW_VERSION"
            git push origin main
          fi

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.bump_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.bump_version.outputs.VERSION }}" -m "Release v${{ steps.bump_version.outputs.VERSION }}"
          git push origin "v${{ steps.bump_version.outputs.VERSION }}"

      - name: Create Release
        id: create_release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.VERSION }}
          release_name: Release v${{ steps.bump_version.outputs.VERSION }}
          body: |
            ## What's Changed

            - Updated Whisper.wasm to version ${{ steps.bump_version.outputs.VERSION }}
            - Improved performance and stability
            - Updated dependencies

            ## Installation

            ```bash
            npm install @timur00kh/whisper.wasm@${{ steps.bump_version.outputs.VERSION }}
            ```

            ## Demo

            Try the live demo: https://timur00kh.github.io/whisper.wasm/
          draft: false
          prerelease: false

  publish:
    runs-on: ubuntu-latest
    needs: [test, build-wasm, create-release]
    if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && needs.create-release.outputs.new-release == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: whisper-wasm-files
          path: wasm/

      - name: Install dependencies
        run: npm ci

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
